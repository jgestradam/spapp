{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useQuery, useQueryClient } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants'; // for when we need a query function for useQuery\n\nasync function getTreatments() {\n  const {\n    data\n  } = await axiosInstance.get('/treatments');\n  return data;\n}\n\nexport function useTreatments() {\n  _s();\n\n  const fallback = [];\n  const {\n    data = fallback\n  } = useQuery(queryKeys.treatments, getTreatments),\n        {};\n  return data;\n}\n\n_s(useTreatments, \"Dt1zu2A8Sa6608pid1m3JMfgG5k=\", false, function () {\n  return [useQuery];\n});\n\nexport function usePrefetchTreatments() {\n  _s2();\n\n  const queryClient = useQueryClient();\n  queryClient.prefetchQuery(queryKeys.treatments, getTreatments);\n}\n\n_s2(usePrefetchTreatments, \"4R+oYVB2Uc11P7bp1KcuhpkfaTw=\", false, function () {\n  return [useQueryClient];\n});","map":{"version":3,"sources":["C:/Users/grego/OneDrive/Documents/udemy-REACT-QUERY/base-lazy-days/client/src/components/treatments/hooks/useTreatments.ts"],"names":["useQuery","useQueryClient","axiosInstance","queryKeys","getTreatments","data","get","useTreatments","fallback","treatments","usePrefetchTreatments","queryClient","prefetchQuery"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,cAAnB,QAAyC,aAAzC;AAGA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,SAAT,QAA0B,gCAA1B,C,CAEA;;AACA,eAAeC,aAAf,GAAqD;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMH,aAAa,CAACI,GAAd,CAAkB,aAAlB,CAAvB;AACA,SAAOD,IAAP;AACD;;AAED,OAAO,SAASE,aAAT,GAAsC;AAAA;;AAC3C,QAAMC,QAAQ,GAAG,EAAjB;AACA,QAAM;AAAEH,IAAAA,IAAI,GAAGG;AAAT,MAAsBR,QAAQ,CAACG,SAAS,CAACM,UAAX,EAAuBL,aAAvB,CAApC;AAAA,QAA0E,EAA1E;AAGA,SAAOC,IAAP;AACD;;GANeE,a;UAEcP,Q;;;AAM9B,OAAO,SAASU,qBAAT,GAAuC;AAAA;;AAC5C,QAAMC,WAAW,GAAGV,cAAc,EAAlC;AACAU,EAAAA,WAAW,CAACC,aAAZ,CAA0BT,SAAS,CAACM,UAApC,EAAgDL,aAAhD;AACD;;IAHeM,qB;UACMT,c","sourcesContent":["import { useQuery, useQueryClient } from 'react-query';\r\n\r\nimport type { Treatment } from '../../../../../shared/types';\r\nimport { axiosInstance } from '../../../axiosInstance';\r\nimport { queryKeys } from '../../../react-query/constants';\r\n\r\n// for when we need a query function for useQuery\r\nasync function getTreatments(): Promise<Treatment[]> {\r\n  const { data } = await axiosInstance.get('/treatments');\r\n  return data;\r\n}\r\n\r\nexport function useTreatments(): Treatment[] {\r\n  const fallback = [];\r\n  const { data = fallback } = useQuery(queryKeys.treatments, getTreatments),{\r\n    \r\n  }\r\n  return data;\r\n}\r\n\r\nexport function usePrefetchTreatments(): void {\r\n  const queryClient = useQueryClient();\r\n  queryClient.prefetchQuery(queryKeys.treatments, getTreatments);\r\n}"]},"metadata":{},"sourceType":"module"}