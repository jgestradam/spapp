{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useCustomToast } from '../../app/hooks/useCustomToast'; // for when we need a query function for useQuery\n\nasync function getTreatments() {\n  const {\n    data\n  } = await axiosInstance.get('/treatments');\n  return data;\n}\n\nexport function useTreatments() {\n  _s();\n\n  const toast = useCustomToast();\n  const fallback = [];\n  const {\n    data = fallback\n  } = useQuery(queryKeys.treatments, getTreatments, {\n    onError: error => {\n      const title = error instanceof Error ? error.message : 'error connecting to server';\n      toast({\n        title,\n        status: 'error'\n      });\n    }\n  });\n  return data;\n}\n\n_s(useTreatments, \"a1yChVsruUsKUqiFt0j458n7JEM=\", false, function () {\n  return [useCustomToast, useQuery];\n});","map":{"version":3,"sources":["C:/Users/grego/OneDrive/Documents/udemy-REACT-QUERY/base-lazy-days/client/src/components/treatments/hooks/useTreatments.ts"],"names":["useQuery","axiosInstance","queryKeys","useCustomToast","getTreatments","data","get","useTreatments","toast","fallback","treatments","onError","error","title","Error","message","status"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,aAAzB;AAGA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,cAAT,QAA+B,gCAA/B,C,CAEA;;AACA,eAAeC,aAAf,GAAqD;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMJ,aAAa,CAACK,GAAd,CAAkB,aAAlB,CAAvB;AACA,SAAOD,IAAP;AACD;;AAED,OAAO,SAASE,aAAT,GAAsC;AAAA;;AAC3C,QAAMC,KAAK,GAAGL,cAAc,EAA5B;AAEA,QAAMM,QAAQ,GAAG,EAAjB;AACA,QAAM;AAAEJ,IAAAA,IAAI,GAAGI;AAAT,MAAsBT,QAAQ,CAACE,SAAS,CAACQ,UAAX,EAAuBN,aAAvB,EAAsC;AACxEO,IAAAA,OAAO,EAAGC,KAAD,IAAW;AAClB,YAAMC,KAAK,GACTD,KAAK,YAAYE,KAAjB,GACIF,KAAK,CAACG,OADV,GAEI,4BAHN;AAIAP,MAAAA,KAAK,CAAC;AAAEK,QAAAA,KAAF;AAASG,QAAAA,MAAM,EAAE;AAAjB,OAAD,CAAL;AACD;AAPuE,GAAtC,CAApC;AASA,SAAOX,IAAP;AACD;;GAdeE,a;UACAJ,c,EAGcH,Q","sourcesContent":["import { useQuery } from 'react-query';\r\n\r\nimport type { Treatment } from '../../../../../shared/types';\r\nimport { axiosInstance } from '../../../axiosInstance';\r\nimport { queryKeys } from '../../../react-query/constants';\r\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\r\n\r\n// for when we need a query function for useQuery\r\nasync function getTreatments(): Promise<Treatment[]> {\r\n  const { data } = await axiosInstance.get('/treatments');\r\n  return data;\r\n}\r\n\r\nexport function useTreatments(): Treatment[] {\r\n  const toast = useCustomToast();\r\n  \r\n  const fallback = [];\r\n  const { data = fallback } = useQuery(queryKeys.treatments, getTreatments, {\r\n    onError: (error) => {\r\n      const title =\r\n        error instanceof Error\r\n          ? error.message\r\n          : 'error connecting to server';\r\n      toast({ title, status: 'error'});\r\n    },\r\n  });\r\n  return data;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}