{"ast":null,"code":"var _s = $RefreshSig$();\n\n// @ts-nocheck\nimport dayjs from 'dayjs';\nimport { useEffect, useState } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useUser } from '../../user/hooks/useUser';\nimport { getMonthYearDetails, getNewMonthYear } from './monthYear'; // for useQuery call\n\nasync function getAppointments(year, month) {\n  const {\n    data\n  } = await axiosInstance.get(`/appointments/${year}/${month}`);\n  return data;\n} // types for hook return object\n\n\n// The purpose of this hook:\n//   1. track the current month/year (aka monthYear) selected by the user\n//     1a. provide a way to update state\n//   2. return the appointments for that particular monthYear\n//     2a. return in AppointmentDateMap format (appointment arrays indexed by day of month)\n//     2b. prefetch the appointments for adjacent monthYears\n//   3. track the state of the filter (all appointments / available appointments)\n//     3a. return the only the applicable appointments for the current monthYear\nexport function useAppointments() {\n  _s();\n\n  /** ****************** START 1: monthYear state *********************** */\n  // get the monthYear for the current date (for default monthYear state)\n  const currentMonthYear = getMonthYearDetails(dayjs()); // state to track current monthYear chosen by user\n  // state value is returned in hook return object\n\n  const [monthYear, setMonthYear] = useState(currentMonthYear); // setter to update monthYear obj in state when user changes month in view,\n  // returned in hook return object\n\n  function updateMonthYear(monthIncrement) {\n    setMonthYear(prevData => getNewMonthYear(prevData, monthIncrement));\n  }\n  /** ****************** END 1: monthYear state ************************* */\n\n  /** ****************** START 2: filter appointments  ****************** */\n  // State and functions for filtering appointments to show all or only available\n\n\n  const [showAll, setShowAll] = useState(false); // We will need imported function getAvailableAppointments here\n  // We need the user to pass to getAvailableAppointments so we can show\n  //   appointments that the logged-in user has reserved (in white)\n\n  const {\n    user\n  } = useUser();\n  const selectFn;\n  /** ****************** END 2: filter appointments  ******************** */\n\n  /** ****************** START 3: useQuery  ***************************** */\n  // useQuery call for appointments for the current monthYear\n  //prefetch next month when monthYear changes\n\n  const queryClient = useQueryClient();\n  useEffect(() => {\n    // assume we are in the middle of the month\n    const nextMonthYear = getNewMonthYear(monthYear, 1);\n    queryClient.prefetchQuery([queryKeys.appointments, nextMonthYear.year, nextMonthYear.month], () => getAppointments(nextMonthYear.year, nextMonthYear.month));\n  }, [queryClient, monthYear]); // Notes:\n  //    1. appointments is an AppointmentDateMap (object with days of month\n  //       as properties, and arrays of appointments for that day as values)\n  //\n  //    2. The getAppointments query function needs monthYear.year and\n  //       monthYear.month\n\n  const fallback = {};\n  const {\n    data: appointments = fallback\n  } = useQuery([queryKeys.appointments, monthYear.year, monthYear.month], () => getAppointments(monthYear.year, monthYear.month));\n  /** ****************** END 3: useQuery  ******************************* */\n\n  return {\n    appointments,\n    monthYear,\n    updateMonthYear,\n    showAll,\n    setShowAll\n  };\n}\n\n_s(useAppointments, \"/4YjsjvVojGHSZ02Ct6HlG5Iy20=\", false, function () {\n  return [useUser, useQueryClient, useQuery];\n});","map":{"version":3,"sources":["C:/Users/grego/OneDrive/Documents/udemy-REACT-QUERY/base-lazy-days/client/src/components/appointments/hooks/useAppointments.ts"],"names":["dayjs","useEffect","useState","useQuery","useQueryClient","axiosInstance","queryKeys","useUser","getMonthYearDetails","getNewMonthYear","getAppointments","year","month","data","get","useAppointments","currentMonthYear","monthYear","setMonthYear","updateMonthYear","monthIncrement","prevData","showAll","setShowAll","user","selectFn","queryClient","nextMonthYear","prefetchQuery","appointments","fallback"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,aAAzC;AAEA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AAGA,SAASC,mBAAT,EAA8BC,eAA9B,QAAgE,aAAhE,C,CAEA;;AACA,eAAeC,eAAf,CACEC,IADF,EAEEC,KAFF,EAG+B;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMR,aAAa,CAACS,GAAd,CAAmB,iBAAgBH,IAAK,IAAGC,KAAM,EAAjD,CAAvB;AACA,SAAOC,IAAP;AACD,C,CAED;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,eAAT,GAA4C;AAAA;;AACjD;AACA;AACA,QAAMC,gBAAgB,GAAGR,mBAAmB,CAACR,KAAK,EAAN,CAA5C,CAHiD,CAKjD;AACA;;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAACc,gBAAD,CAA1C,CAPiD,CASjD;AACA;;AACA,WAASG,eAAT,CAAyBC,cAAzB,EAAuD;AACrDF,IAAAA,YAAY,CAAEG,QAAD,IAAcZ,eAAe,CAACY,QAAD,EAAWD,cAAX,CAA9B,CAAZ;AACD;AACD;;AACA;AACA;;;AACA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAAC,KAAD,CAAtC,CAjBiD,CAmBjD;AACA;AACA;;AACA,QAAM;AAAEsB,IAAAA;AAAF,MAAWjB,OAAO,EAAxB;AAEA,QAAMkB,QAAN;AAEA;;AACA;AACA;AAEA;;AACA,QAAMC,WAAW,GAAGtB,cAAc,EAAlC;AACAH,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAM0B,aAAa,GAAGlB,eAAe,CAACQ,SAAD,EAAY,CAAZ,CAArC;AACAS,IAAAA,WAAW,CAACE,aAAZ,CACE,CAACtB,SAAS,CAACuB,YAAX,EAAyBF,aAAa,CAAChB,IAAvC,EAA6CgB,aAAa,CAACf,KAA3D,CADF,EAEE,MAAMF,eAAe,CAACiB,aAAa,CAAChB,IAAf,EAAqBgB,aAAa,CAACf,KAAnC,CAFvB;AAID,GAPQ,EAON,CAACc,WAAD,EAAcT,SAAd,CAPM,CAAT,CAhCiD,CAyCjD;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMa,QAAQ,GAAG,EAAjB;AAEA,QAAM;AAAEjB,IAAAA,IAAI,EAAEgB,YAAY,GAAGC;AAAvB,MAAoC3B,QAAQ,CAChD,CAACG,SAAS,CAACuB,YAAX,EAAwBZ,SAAS,CAACN,IAAlC,EAAwCM,SAAS,CAACL,KAAlD,CADgD,EAEhD,MAAMF,eAAe,CAAEO,SAAS,CAACN,IAAZ,EAAkBM,SAAS,CAACL,KAA5B,CAF2B,CAAlD;AAKA;;AAEA,SAAO;AAAEiB,IAAAA,YAAF;AAAgBZ,IAAAA,SAAhB;AAA2BE,IAAAA,eAA3B;AAA4CG,IAAAA,OAA5C;AAAqDC,IAAAA;AAArD,GAAP;AACD;;GAzDeR,e;UAsBGR,O,EASGH,c,EAkBsBD,Q","sourcesContent":["// @ts-nocheck\r\nimport dayjs from 'dayjs';\r\nimport { Dispatch, SetStateAction, useEffect, useState } from 'react';\r\nimport { useQuery, useQueryClient } from 'react-query';\r\n\r\nimport { axiosInstance } from '../../../axiosInstance';\r\nimport { queryKeys } from '../../../react-query/constants';\r\nimport { useUser } from '../../user/hooks/useUser';\r\nimport { AppointmentDateMap } from '../types';\r\nimport { getAvailableAppointments } from '../utils';\r\nimport { getMonthYearDetails, getNewMonthYear, MonthYear } from './monthYear';\r\n\r\n// for useQuery call\r\nasync function getAppointments(\r\n  year: string,\r\n  month: string,\r\n): Promise<AppointmentDateMap> {\r\n  const { data } = await axiosInstance.get(`/appointments/${year}/${month}`);\r\n  return data;\r\n}\r\n\r\n// types for hook return object\r\ninterface UseAppointments {\r\n  appointments: AppointmentDateMap;\r\n  monthYear: MonthYear;\r\n  updateMonthYear: (monthIncrement: number) => void;\r\n  showAll: boolean;\r\n  setShowAll: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\n// The purpose of this hook:\r\n//   1. track the current month/year (aka monthYear) selected by the user\r\n//     1a. provide a way to update state\r\n//   2. return the appointments for that particular monthYear\r\n//     2a. return in AppointmentDateMap format (appointment arrays indexed by day of month)\r\n//     2b. prefetch the appointments for adjacent monthYears\r\n//   3. track the state of the filter (all appointments / available appointments)\r\n//     3a. return the only the applicable appointments for the current monthYear\r\nexport function useAppointments(): UseAppointments {\r\n  /** ****************** START 1: monthYear state *********************** */\r\n  // get the monthYear for the current date (for default monthYear state)\r\n  const currentMonthYear = getMonthYearDetails(dayjs());\r\n\r\n  // state to track current monthYear chosen by user\r\n  // state value is returned in hook return object\r\n  const [monthYear, setMonthYear] = useState(currentMonthYear);\r\n\r\n  // setter to update monthYear obj in state when user changes month in view,\r\n  // returned in hook return object\r\n  function updateMonthYear(monthIncrement: number): void {\r\n    setMonthYear((prevData) => getNewMonthYear(prevData, monthIncrement));\r\n  }\r\n  /** ****************** END 1: monthYear state ************************* */\r\n  /** ****************** START 2: filter appointments  ****************** */\r\n  // State and functions for filtering appointments to show all or only available\r\n  const [showAll, setShowAll] = useState(false);\r\n\r\n  // We will need imported function getAvailableAppointments here\r\n  // We need the user to pass to getAvailableAppointments so we can show\r\n  //   appointments that the logged-in user has reserved (in white)\r\n  const { user } = useUser();\r\n\r\n  const selectFn\r\n\r\n  /** ****************** END 2: filter appointments  ******************** */\r\n  /** ****************** START 3: useQuery  ***************************** */\r\n  // useQuery call for appointments for the current monthYear\r\n\r\n  //prefetch next month when monthYear changes\r\n  const queryClient = useQueryClient();\r\n  useEffect(() => {\r\n    // assume we are in the middle of the month\r\n    const nextMonthYear = getNewMonthYear(monthYear, 1);\r\n    queryClient.prefetchQuery(\r\n      [queryKeys.appointments, nextMonthYear.year, nextMonthYear.month],\r\n      () => getAppointments(nextMonthYear.year, nextMonthYear.month),\r\n    );\r\n  }, [queryClient, monthYear]);\r\n\r\n  // Notes:\r\n  //    1. appointments is an AppointmentDateMap (object with days of month\r\n  //       as properties, and arrays of appointments for that day as values)\r\n  //\r\n  //    2. The getAppointments query function needs monthYear.year and\r\n  //       monthYear.month\r\n  const fallback = {};\r\n\r\n  const { data: appointments = fallback } = useQuery(\r\n    [queryKeys.appointments,monthYear.year, monthYear.month],\r\n    () => getAppointments (monthYear.year, monthYear.month),\r\n  );\r\n\r\n  /** ****************** END 3: useQuery  ******************************* */\r\n\r\n  return { appointments, monthYear, updateMonthYear, showAll, setShowAll };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}