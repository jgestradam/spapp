{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { axiosInstance } from '../axiosInstance';\nimport { useCustomToast } from '../components/app/hooks/useCustomToast';\nimport { useUser } from '../components/user/hooks/useUser';\nexport function useAuth() {\n  _s();\n\n  const SERVER_ERROR = 'There was an error contacting the server.';\n  const toast = useCustomToast();\n  const {\n    clearUser,\n    updateUser\n  } = useUser();\n\n  async function authServerCall(urlEndpoint, email, password) {\n    try {\n      const {\n        data,\n        status\n      } = await axiosInstance({\n        url: urlEndpoint,\n        method: 'POST',\n        data: {\n          email,\n          password\n        },\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (status === 400) {\n        const title = 'message' in data ? data.message : 'Unauthorized';\n        toast({\n          title,\n          status: 'warning'\n        });\n        return;\n      }\n\n      if ('user' in data && 'token' in data.user) {\n        toast({\n          title: `Logged in as ${data.user.email}`,\n          status: 'info'\n        }); // update stored user data\n\n        updateUser(data.user);\n      }\n    } catch (errorResponse) {\n      var _errorResponse$respon, _errorResponse$respon2, _errorResponse$respon3, _errorResponse$respon4;\n\n      const title = axios.isAxiosError(errorResponse) && (errorResponse === null || errorResponse === void 0 ? void 0 : (_errorResponse$respon = errorResponse.response) === null || _errorResponse$respon === void 0 ? void 0 : (_errorResponse$respon2 = _errorResponse$respon.data) === null || _errorResponse$respon2 === void 0 ? void 0 : _errorResponse$respon2.message) ? errorResponse === null || errorResponse === void 0 ? void 0 : (_errorResponse$respon3 = errorResponse.response) === null || _errorResponse$respon3 === void 0 ? void 0 : (_errorResponse$respon4 = _errorResponse$respon3.data) === null || _errorResponse$respon4 === void 0 ? void 0 : _errorResponse$respon4.message : SERVER_ERROR;\n      toast({\n        title,\n        status: 'error'\n      });\n    }\n  }\n\n  async function signin(email, password) {\n    authServerCall('/signin', email, password);\n  }\n\n  async function signup(email, password) {\n    authServerCall('/user', email, password);\n  }\n\n  function signout() {\n    // clear user from stored user data\n    clearUser();\n    toast({\n      title: 'Logged out!',\n      status: 'info'\n    });\n  } // Return the user object and auth methods\n\n\n  return {\n    signin,\n    signup,\n    signout\n  };\n}\n\n_s(useAuth, \"YkGiRRmMhuSlt1ZJ0zFyP+/aqIw=\", false, function () {\n  return [useCustomToast, useUser];\n});","map":{"version":3,"sources":["C:/Users/grego/OneDrive/Documents/udemy-REACT-QUERY/base-lazy-days/client/src/auth/useAuth.tsx"],"names":["axios","axiosInstance","useCustomToast","useUser","useAuth","SERVER_ERROR","toast","clearUser","updateUser","authServerCall","urlEndpoint","email","password","data","status","url","method","headers","title","message","user","errorResponse","isAxiosError","response","signin","signup","signout"],"mappings":";;AAAA,OAAOA,KAAP,MAAqC,OAArC;AAGA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,cAAT,QAA+B,wCAA/B;AACA,SAASC,OAAT,QAAwB,kCAAxB;AAYA,OAAO,SAASC,OAAT,GAA4B;AAAA;;AACjC,QAAMC,YAAY,GAAG,2CAArB;AACA,QAAMC,KAAK,GAAGJ,cAAc,EAA5B;AACA,QAAM;AAAEK,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA4BL,OAAO,EAAzC;;AAEA,iBAAeM,cAAf,CACEC,WADF,EAEEC,KAFF,EAGEC,QAHF,EAIiB;AACf,QAAI;AACF,YAAM;AACJC,QAAAA,IADI;AAEJC,QAAAA;AAFI,UAG+B,MAAMb,aAAa,CAAC;AACvDc,QAAAA,GAAG,EAAEL,WADkD;AAEvDM,QAAAA,MAAM,EAAE,MAF+C;AAGvDH,QAAAA,IAAI,EAAE;AAAEF,UAAAA,KAAF;AAASC,UAAAA;AAAT,SAHiD;AAIvDK,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAJ8C,OAAD,CAHxD;;AAUA,UAAIH,MAAM,KAAK,GAAf,EAAoB;AAClB,cAAMI,KAAK,GAAG,aAAaL,IAAb,GAAoBA,IAAI,CAACM,OAAzB,GAAmC,cAAjD;AACAb,QAAAA,KAAK,CAAC;AAAEY,UAAAA,KAAF;AAASJ,UAAAA,MAAM,EAAE;AAAjB,SAAD,CAAL;AACA;AACD;;AAED,UAAI,UAAUD,IAAV,IAAkB,WAAWA,IAAI,CAACO,IAAtC,EAA4C;AAC1Cd,QAAAA,KAAK,CAAC;AACJY,UAAAA,KAAK,EAAG,gBAAeL,IAAI,CAACO,IAAL,CAAUT,KAAM,EADnC;AAEJG,UAAAA,MAAM,EAAE;AAFJ,SAAD,CAAL,CAD0C,CAM1C;;AACAN,QAAAA,UAAU,CAACK,IAAI,CAACO,IAAN,CAAV;AACD;AACF,KA1BD,CA0BE,OAAOC,aAAP,EAAsB;AAAA;;AACtB,YAAMH,KAAK,GACTlB,KAAK,CAACsB,YAAN,CAAmBD,aAAnB,MACAA,aADA,aACAA,aADA,gDACAA,aAAa,CAAEE,QADf,oFACA,sBAAyBV,IADzB,2DACA,uBAA+BM,OAD/B,IAEIE,aAFJ,aAEIA,aAFJ,iDAEIA,aAAa,CAAEE,QAFnB,qFAEI,uBAAyBV,IAF7B,2DAEI,uBAA+BM,OAFnC,GAGId,YAJN;AAKAC,MAAAA,KAAK,CAAC;AACJY,QAAAA,KADI;AAEJJ,QAAAA,MAAM,EAAE;AAFJ,OAAD,CAAL;AAID;AACF;;AAED,iBAAeU,MAAf,CAAsBb,KAAtB,EAAqCC,QAArC,EAAsE;AACpEH,IAAAA,cAAc,CAAC,SAAD,EAAYE,KAAZ,EAAmBC,QAAnB,CAAd;AACD;;AACD,iBAAea,MAAf,CAAsBd,KAAtB,EAAqCC,QAArC,EAAsE;AACpEH,IAAAA,cAAc,CAAC,OAAD,EAAUE,KAAV,EAAiBC,QAAjB,CAAd;AACD;;AAED,WAASc,OAAT,GAAyB;AACvB;AACAnB,IAAAA,SAAS;AACTD,IAAAA,KAAK,CAAC;AACJY,MAAAA,KAAK,EAAE,aADH;AAEJJ,MAAAA,MAAM,EAAE;AAFJ,KAAD,CAAL;AAID,GA/DgC,CAiEjC;;;AACA,SAAO;AACLU,IAAAA,MADK;AAELC,IAAAA,MAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD;;GAvEetB,O;UAEAF,c,EACoBC,O","sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\n\r\nimport { User } from '../../../shared/types';\r\nimport { axiosInstance } from '../axiosInstance';\r\nimport { useCustomToast } from '../components/app/hooks/useCustomToast';\r\nimport { useUser } from '../components/user/hooks/useUser';\r\n\r\ninterface UseAuth {\r\n  signin: (email: string, password: string) => Promise<void>;\r\n  signup: (email: string, password: string) => Promise<void>;\r\n  signout: () => void;\r\n}\r\n\r\ntype UserResponse = { user: User };\r\ntype ErrorResponse = { message: string };\r\ntype AuthResponseType = UserResponse | ErrorResponse;\r\n\r\nexport function useAuth(): UseAuth {\r\n  const SERVER_ERROR = 'There was an error contacting the server.';\r\n  const toast = useCustomToast();\r\n  const { clearUser, updateUser } = useUser();\r\n\r\n  async function authServerCall(\r\n    urlEndpoint: string,\r\n    email: string,\r\n    password: string,\r\n  ): Promise<void> {\r\n    try {\r\n      const {\r\n        data,\r\n        status,\r\n      }: AxiosResponse<AuthResponseType> = await axiosInstance({\r\n        url: urlEndpoint,\r\n        method: 'POST',\r\n        data: { email, password },\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n\r\n      if (status === 400) {\r\n        const title = 'message' in data ? data.message : 'Unauthorized';\r\n        toast({ title, status: 'warning' });\r\n        return;\r\n      }\r\n\r\n      if ('user' in data && 'token' in data.user) {\r\n        toast({\r\n          title: `Logged in as ${data.user.email}`,\r\n          status: 'info',\r\n        });\r\n\r\n        // update stored user data\r\n        updateUser(data.user);\r\n      }\r\n    } catch (errorResponse) {\r\n      const title =\r\n        axios.isAxiosError(errorResponse) &&\r\n        errorResponse?.response?.data?.message\r\n          ? errorResponse?.response?.data?.message\r\n          : SERVER_ERROR;\r\n      toast({\r\n        title,\r\n        status: 'error',\r\n      });\r\n    }\r\n  }\r\n\r\n  async function signin(email: string, password: string): Promise<void> {\r\n    authServerCall('/signin', email, password);\r\n  }\r\n  async function signup(email: string, password: string): Promise<void> {\r\n    authServerCall('/user', email, password);\r\n  }\r\n\r\n  function signout(): void {\r\n    // clear user from stored user data\r\n    clearUser();\r\n    toast({\r\n      title: 'Logged out!',\r\n      status: 'info',\r\n    });\r\n  }\r\n\r\n  // Return the user object and auth methods\r\n  return {\r\n    signin,\r\n    signup,\r\n    signout,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}