{"ast":null,"code":"import dayjs from 'dayjs';\nexport function appointmentInPast(appointmentData) {\n  const now = dayjs();\n  return dayjs(appointmentData.dateTime) < now;\n}\nexport function getAppointmentColor(appointmentData, userId) {\n  const taken = !!appointmentData.userId;\n\n  if (taken || appointmentInPast(appointmentData)) {\n    const textColor = 'black';\n    const bgColor = appointmentData.userId === userId ? 'white' : 'gray.300';\n    return [textColor, bgColor];\n  }\n\n  const textColor = 'white';\n\n  switch (appointmentData.treatmentName.toLowerCase()) {\n    case 'massage':\n      return [textColor, 'purple.700'];\n\n    case 'scrub':\n      return [textColor, 'blue.700'];\n\n    case 'facial':\n      return [textColor, 'green.700'];\n\n    default:\n      return [textColor, 'black'];\n  }\n}\nexport function getAvailableAppointments(appointments) {\n  // clone so as not to mutate argument directly\n  const filteredAppointments = { ...appointments\n  };\n  Object.keys(filteredAppointments).forEach(date => {\n    filteredAppointments[date] = filteredAppointments[date].filter(appointment => !appointment.userId);\n  });\n  return filteredAppointments;\n}","map":{"version":3,"sources":["C:/Users/grego/OneDrive/Documents/udemy-REACT-QUERY/base-lazy-days/client/src/components/appointments/utils.ts"],"names":["dayjs","appointmentInPast","appointmentData","now","dateTime","getAppointmentColor","userId","taken","textColor","bgColor","treatmentName","toLowerCase","getAvailableAppointments","appointments","filteredAppointments","Object","keys","forEach","date","filter","appointment"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,OAAO,SAASC,iBAAT,CAA2BC,eAA3B,EAAkE;AACvE,QAAMC,GAAG,GAAGH,KAAK,EAAjB;AACA,SAAOA,KAAK,CAACE,eAAe,CAACE,QAAjB,CAAL,GAAkCD,GAAzC;AACD;AAED,OAAO,SAASE,mBAAT,CACLH,eADK,EAELI,MAFK,EAGa;AAClB,QAAMC,KAAK,GAAG,CAAC,CAACL,eAAe,CAACI,MAAhC;;AAEA,MAAIC,KAAK,IAAIN,iBAAiB,CAACC,eAAD,CAA9B,EAAiD;AAC/C,UAAMM,SAAS,GAAG,OAAlB;AACA,UAAMC,OAAO,GAAGP,eAAe,CAACI,MAAhB,KAA2BA,MAA3B,GAAoC,OAApC,GAA8C,UAA9D;AACA,WAAO,CAACE,SAAD,EAAYC,OAAZ,CAAP;AACD;;AACD,QAAMD,SAAS,GAAG,OAAlB;;AAEA,UAAQN,eAAe,CAACQ,aAAhB,CAA8BC,WAA9B,EAAR;AACE,SAAK,SAAL;AACE,aAAO,CAACH,SAAD,EAAY,YAAZ,CAAP;;AACF,SAAK,OAAL;AACE,aAAO,CAACA,SAAD,EAAY,UAAZ,CAAP;;AACF,SAAK,QAAL;AACE,aAAO,CAACA,SAAD,EAAY,WAAZ,CAAP;;AACF;AACE,aAAO,CAACA,SAAD,EAAY,OAAZ,CAAP;AARJ;AAUD;AAED,OAAO,SAASI,wBAAT,CACLC,YADK,EAEe;AACpB;AACA,QAAMC,oBAAoB,GAAG,EAAE,GAAGD;AAAL,GAA7B;AAEAE,EAAAA,MAAM,CAACC,IAAP,CAAYF,oBAAZ,EAAkCG,OAAlC,CAA2CC,IAAD,IAAU;AAClDJ,IAAAA,oBAAoB,CAACI,IAAD,CAApB,GAA6BJ,oBAAoB,CAACI,IAAD,CAApB,CAA2BC,MAA3B,CAC1BC,WAAD,IAA8B,CAACA,WAAW,CAACd,MADhB,CAA7B;AAGD,GAJD;AAMA,SAAOQ,oBAAP;AACD","sourcesContent":["import dayjs from 'dayjs';\r\n\r\nimport type { Appointment, AppointmentDateMap } from '../../../../shared/types';\r\n\r\nexport function appointmentInPast(appointmentData: Appointment): boolean {\r\n  const now = dayjs();\r\n  return dayjs(appointmentData.dateTime) < now;\r\n}\r\n\r\nexport function getAppointmentColor(\r\n  appointmentData: Appointment,\r\n  userId: number | undefined,\r\n): [string, string] {\r\n  const taken = !!appointmentData.userId;\r\n\r\n  if (taken || appointmentInPast(appointmentData)) {\r\n    const textColor = 'black';\r\n    const bgColor = appointmentData.userId === userId ? 'white' : 'gray.300';\r\n    return [textColor, bgColor];\r\n  }\r\n  const textColor = 'white';\r\n\r\n  switch (appointmentData.treatmentName.toLowerCase()) {\r\n    case 'massage':\r\n      return [textColor, 'purple.700'];\r\n    case 'scrub':\r\n      return [textColor, 'blue.700'];\r\n    case 'facial':\r\n      return [textColor, 'green.700'];\r\n    default:\r\n      return [textColor, 'black'];\r\n  }\r\n}\r\n\r\nexport function getAvailableAppointments(\r\n  appointments: AppointmentDateMap,\r\n): AppointmentDateMap {\r\n  // clone so as not to mutate argument directly\r\n  const filteredAppointments = { ...appointments };\r\n\r\n  Object.keys(filteredAppointments).forEach((date) => {\r\n    filteredAppointments[date] = filteredAppointments[date].filter(\r\n      (appointment: Appointment) => !appointment.userId,\r\n    );\r\n  });\r\n\r\n  return filteredAppointments;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}