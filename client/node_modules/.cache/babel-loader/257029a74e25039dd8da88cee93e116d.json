{"ast":null,"code":"import dayjs from 'dayjs'; // for storing current month / year details\n\n// for incrementing MonthYear\nexport function getUpdatedMonthYear(monthYear, monthIncrement) {\n  // the clone is necessary to prevent mutation\n  return monthYear.startDate.clone().add(monthIncrement, 'months');\n} // get calendar-relevant data for the month containing initialDate\n\nexport function getMonthYearDetails(initialDate) {\n  const month = initialDate.format('MM');\n  const year = initialDate.format('YYYY');\n  const startDate = dayjs(`${year}${month}01`);\n  const firstDOW = Number(startDate.format('d'));\n  const lastDate = Number(startDate.clone().endOf('month').format('DD'));\n  const monthName = startDate.format('MMMM');\n  return {\n    startDate,\n    firstDOW,\n    lastDate,\n    monthName,\n    month,\n    year\n  };\n}\nexport function getNewMonthYear(prevData, monthIncrement) {\n  // update the monthYear by the specified increment\n  const newMonthYear = getUpdatedMonthYear(prevData, monthIncrement); // return object with the details for the new monthYear\n\n  return getMonthYearDetails(newMonthYear);\n}","map":{"version":3,"sources":["C:/Users/grego/OneDrive/Documents/udemy-REACT-QUERY/base-lazy-days/client/src/components/appointments/hooks/monthYear.ts"],"names":["dayjs","getUpdatedMonthYear","monthYear","monthIncrement","startDate","clone","add","getMonthYearDetails","initialDate","month","format","year","firstDOW","Number","lastDate","endOf","monthName","getNewMonthYear","prevData","newMonthYear"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AAUA;AACA,OAAO,SAASC,mBAAT,CACLC,SADK,EAELC,cAFK,EAGQ;AACb;AACA,SAAOD,SAAS,CAACE,SAAV,CAAoBC,KAApB,GAA4BC,GAA5B,CAAgCH,cAAhC,EAAgD,QAAhD,CAAP;AACD,C,CAED;;AACA,OAAO,SAASI,mBAAT,CAA6BC,WAA7B,EAAkE;AACvE,QAAMC,KAAK,GAAGD,WAAW,CAACE,MAAZ,CAAmB,IAAnB,CAAd;AACA,QAAMC,IAAI,GAAGH,WAAW,CAACE,MAAZ,CAAmB,MAAnB,CAAb;AACA,QAAMN,SAAS,GAAGJ,KAAK,CAAE,GAAEW,IAAK,GAAEF,KAAM,IAAjB,CAAvB;AACA,QAAMG,QAAQ,GAAGC,MAAM,CAACT,SAAS,CAACM,MAAV,CAAiB,GAAjB,CAAD,CAAvB;AACA,QAAMI,QAAQ,GAAGD,MAAM,CAACT,SAAS,CAACC,KAAV,GAAkBU,KAAlB,CAAwB,OAAxB,EAAiCL,MAAjC,CAAwC,IAAxC,CAAD,CAAvB;AACA,QAAMM,SAAS,GAAGZ,SAAS,CAACM,MAAV,CAAiB,MAAjB,CAAlB;AACA,SAAO;AAAEN,IAAAA,SAAF;AAAaQ,IAAAA,QAAb;AAAuBE,IAAAA,QAAvB;AAAiCE,IAAAA,SAAjC;AAA4CP,IAAAA,KAA5C;AAAmDE,IAAAA;AAAnD,GAAP;AACD;AAED,OAAO,SAASM,eAAT,CACLC,QADK,EAELf,cAFK,EAGM;AACX;AACA,QAAMgB,YAAY,GAAGlB,mBAAmB,CAACiB,QAAD,EAAWf,cAAX,CAAxC,CAFW,CAIX;;AACA,SAAOI,mBAAmB,CAACY,YAAD,CAA1B;AACD","sourcesContent":["import dayjs from 'dayjs';\r\n\r\n// for storing current month / year details\r\nexport interface MonthYear {\r\n  startDate: dayjs.Dayjs; // first day of the month\r\n  firstDOW: number; // day of week; 0 === Sunday\r\n  lastDate: number; // last date of the month\r\n  monthName: string; // name of the month\r\n  month: string; // two digit month number\r\n  year: string; // four digit year\r\n}\r\n\r\n// for incrementing MonthYear\r\nexport function getUpdatedMonthYear(\r\n  monthYear: MonthYear,\r\n  monthIncrement: number,\r\n): dayjs.Dayjs {\r\n  // the clone is necessary to prevent mutation\r\n  return monthYear.startDate.clone().add(monthIncrement, 'months');\r\n}\r\n\r\n// get calendar-relevant data for the month containing initialDate\r\nexport function getMonthYearDetails(initialDate: dayjs.Dayjs): MonthYear {\r\n  const month = initialDate.format('MM');\r\n  const year = initialDate.format('YYYY');\r\n  const startDate = dayjs(`${year}${month}01`);\r\n  const firstDOW = Number(startDate.format('d'));\r\n  const lastDate = Number(startDate.clone().endOf('month').format('DD'));\r\n  const monthName = startDate.format('MMMM');\r\n  return { startDate, firstDOW, lastDate, monthName, month, year };\r\n}\r\n\r\nexport function getNewMonthYear(\r\n  prevData: MonthYear,\r\n  monthIncrement: number,\r\n): MonthYear {\r\n  // update the monthYear by the specified increment\r\n  const newMonthYear = getUpdatedMonthYear(prevData, monthIncrement);\r\n\r\n  // return object with the details for the new monthYear\r\n  return getMonthYearDetails(newMonthYear);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}